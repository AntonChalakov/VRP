#include <math.h>

#include "Street.h"

#include "RoadSystem.h"
#include "Vehicle.h"

Street::Lanes::Lanes()
    : flags(), cars(), maxVehicles(0), arrivalTimes() {
}

Street::Street(RoadSystem *roadSystem, const ID id, const vector<ID>& nodeIds)
    : flags(0), forward(), backward() , id(id), nodes(nodeIds), maxSpeed(-1), roadSystem(roadSystem), type(DEFAULT) {
}

/**
 Determines whether this street should be simulated mirco or meso.
 @param micro Whether or not simulate this street with the microsimulator.
 */
void Street::setMicro(const bool micro) {
    if (micro)
        flags |= IS_MICRO;
    else
        flags &= ~IS_MICRO;
}

/**
 Returns whether this street will be simulated with the microsimulator.
 @return \c True if it will be, \c false otherwise.
 */
bool Street::getIsMicro() const {
    return flags & IS_MICRO;
}

/**
 Returns the id of this street.
 @return The id of the street.
 */
ID Street::getId() const {
    return id;
}

/**
 Returns the node ids of the nodes that describe the course of this street.
 @return A vector containing the ids of the nodes of this street.
 */
const vector<ID>* Street::getNodeIds() {
    return &nodes;
}

/**
 Returns the length of this street.
 Note that this is not an exact value but the sum of the
 distances between the nodes.
 @return The lenght of the street.
 */
double Street::getLength() const {

    double length = 0.0;
    Vec2f pos    = roadSystem->getNode(nodes[1])->getPosition();
    Vec2f oldPos = roadSystem->getNode(nodes[0])->getPosition();

    for (unsigned int i = 2; i < nodes.size(); i++) {
        length += sqrt((pos[0] - oldPos[0])*(pos[0] - oldPos[0]) + (pos[1] - oldPos[1])*(pos[1] - oldPos[1]));
        oldPos = pos;
        pos = roadSystem->getNode(nodes[i])->getPosition();
    }

    return length;
}

/**
 Sets the allowed maximum speed on this street.
 If set to a negative value, the speed will be retrieved
 from the associated RoadSystem.
 @param speed The new allowed maximum speed.
 */
void Street::setMaxSpeed(const double speed) {
    maxSpeed = speed;
}

/**
 Returns the allowed maximum speed on this street.
 @return The currently allowed maximum speed.
 */
double Street::getMaxSpeed() const {
    if (maxSpeed < 0)
        // If roadSystem is NULL, the crash is your own fault ;-)
        return roadSystem->getDefaultSpeed();
    else
        return maxSpeed;
}

/**
 Sets the type of this street.
 This type describes how big the street is, e.g. a street to private houses
 or a big motorway between towns.
 If set to TYPE::DEFAULT the RoadSystem will be queried for the type.
 @param type The type to set.
 */
void Street::setType(const TYPE type) {
    this->type = type;
}

/**
 Returns the type of this street.
 @param type The type of this street.
 */
Street::TYPE Street::getType() const {
    if (type < 0)
        return roadSystem->getDefaultType();
    else
        return type;
}

/**
 Sets the number of lanes for the given direction.
 New lanes will start empty but will have the TURN_THROUGH flag set.
 @param direction The direction to set. The actual value does not matter,
             only the sign of it will be interpreted.
 @param count The new number of lanes in that direction.
 @return An integer with the number of lanes in the given direction. Note that
         a value of 2 means that the lanes 1 and 2 exists.
 */
void Street::setLaneCount(const int direction, unsigned int count) {

    if (direction > 0) {
        unsigned int oldCount = forward.flags.size();
        forward.flags.resize(count);
        forward.cars.resize(count);
        for (; oldCount < count; oldCount++)
            forward.flags[oldCount] = TURN_THROUGH;
        // Calculate a new maximal vehicle count
        forward.maxVehicles = (getLength() * count) / VEHICLE_LENGTH;
    } else if (direction < 0) {
        unsigned int oldCount = backward.flags.size();
        backward.flags.resize(count);
        backward.cars.resize(count);
        for (; oldCount < count; oldCount++)
            backward.flags[oldCount] = TURN_THROUGH;
        // Calculate a new maximal vehicle count
        backward.maxVehicles = (getLength() * count) / VEHICLE_LENGTH;
    }

}

/**
 Returns the number of lanes for the given direction.
 @param direction The direction to return. The actual value does not matter,
             only the sign of it will be interpreted.
 @return An integer with the number of lanes in the given direction. Note that
         a value of 2 means that the lanes 1 and 2 exists.
 */
unsigned int Street::getLaneCount(const int direction) const {
    if (direction > 0)
        return forward.flags.size();
    else
        return backward.flags.size();
}

/**
 Sets the flags of a lane.
 This overwrites the current flags of a lane.
 To set a single flag, you have to call setLaneFlags(lane, getLaneFlags(lane) | TURN_RIGHT).
 @param lane The number of the lane.
 @param flags The flags to set.
 */
void Street::setLaneFlags(const int lane, const LANEFLAG flags) {
    if (lane > 0 && lane - 1 < (int) forward.flags.size())
        forward.flags[lane - 1] = flags;
    else if (lane < 0 && (-1*lane) - 1 < (int) backward.flags.size())
        backward.flags[(-1*lane) - 1] = flags;
}

/**
 Returns the current flags of a lane.
 @param lane The lane to get the flags of.
 */
Street::LANEFLAG Street::getLaneFlags(const int lane) const {
    if (lane > 0 && lane - 1 < (int) forward.flags.size())
        return forward.flags[lane - 1];
    else if (lane < 0 && (-1*lane) - 1 < (int) backward.flags.size())
        return backward.flags[(-1*lane) - 1];
    else
        return 0;
}

/**
 Returns the set containing the vehicles on a lane.
 The returned set can be modified.
 @param lane The lane to get the vehicles of.
 @return A set with the vehicles of this lane.
 */
set<Vehicle>* Street::getLaneVehicles(const int lane) {
    if (lane > 0 && lane - 1 < (int) forward.cars.size())
        return &forward.cars[lane - 1];
    else if (lane < 0 && (-1*lane) - 1 < (int) backward.cars.size())
        return &backward.cars[(-1*lane) - 1];
    else
        return 0;
}

/**
 Returns the vehicle density of one direction of the street.
 @param direction The direction to return. The actual value does not matter,
             only the sign of it will be interpreted.
 @return The density of this direction.
 */
double Street::getLaneDensity(const int direction) const {

    if (getIsMicro()) {

        // Add up all vehicle counts
        double sum = 0;

        if (direction > 0) {
            for (unsigned int i = 0; i < forward.cars.size(); ++i)
                sum += forward.cars[i].size();
        } else {
            for (unsigned int i = 0; i < backward.cars.size(); ++i)
                sum += backward.cars[i].size();
        }

        return sum / getLaneMaxVehicles(direction);

    } else  {
        return (double)getLaneArrivalTimes(direction)->size() / getLaneMaxVehicles(direction);
    }
}

/**
 Returns the time it needs to travel the street.
 This time is based on the length of the street but variies depending
 from the amount of vehicles currently driving over it.
 @param direction The direction to return. The actual value does not matter,
             only the sign of it will be interpreted.
 @return The time it probably needs to travel along this street.
 */
time_duration Street::getLaneTravelTime(const int direction) const {

    if (direction == 0)
        return hours(0);

    // Time if the road would be empty
    /// TODO: Check if milliseconds() is correct
    time_duration time(milliseconds(getLength() * getMaxSpeed() * 60 * 1000));

    // Now take only a fraction of it depending on the number of vehicles
    time *= getLaneDensity(direction);

    return time;
}

/**
 Returns the maximal number of vehicles that can drive into one direction.
 @note Even when the method expects a lane as parameter, the returned value is
       calculated for one direction and not for one lane. This also means that
       all lanes into the same direction return the same value.
 @param direction The direction to return. The actual value does not matter,
             only the sign of it will be interpreted.
 @return The maximum number of vehicles that fit on this street in the given direction.
 */
unsigned int Street::getLaneMaxVehicles(const int direction) const {
    if (direction > 0)
        return forward.maxVehicles;
    else
        return backward.maxVehicles;
}

/**
 Returns the set of arrival times.
 In the mesosimulation these are the arrival times of the vehicles
 on this lanes. In the microsimulation this set should be empty.
 @param direction The direction to return. The actual value does not matter,
             only the sign of it will be interpreted.
 @return A set with the arrival times of the vehicle in the given direction.
 */
multiset<ptime>* Street::getLaneArrivalTimes(const int direction) {
    if (direction > 0)
        return &forward.arrivalTimes;
    else
        return &backward.arrivalTimes;
}

/**
 Calculates a destination-position for a vehicle.
 Since vehicle on outer lanes should not drive to the actual position of the node,
 this method calculates a translated position based on the node and the actual lane.
 @param nodeId The id of the node that is the destination.
 @param lane The number of the lane that is driven on.
 @return The position to drive to.
 */
Vec2f Street::getRelativeNodePosition(ID nodeId, int lane) {

    // Find the node in the list
    unsigned int idPos;
    for (idPos = 0; idPos < nodes.size(); ++idPos) {
        if (nodes[idPos] == nodeId)
            break;
    }
    if (idPos == nodes.size()) {
        // Not found? Then the parameter has been wrong
        // If the user gives trash, he deserves this return value
        if (!nodes.empty())
            return roadSystem->getNode(nodes[0])->getPosition();
        else
            return Vec2f(0,0);
    }

    // Get the neighbor-nodes and calculate the gradiant between them
    Vec2f posPrev, posNext;
    if (idPos > 0)
        roadSystem->getNode(nodes[idPos - 1])->getPosition();
    else
        roadSystem->getNode(nodes[idPos])->getPosition();
    if (idPos < nodes.size() - 1)
        posNext = roadSystem->getNode(nodes[idPos + 1])->getPosition();
    else
        posNext = roadSystem->getNode(nodes[idPos])->getPosition();

    Vec2f gradiant(posNext[0] - posPrev[0], posNext[1] - posPrev[1]);

    // Calculate the normal to the gradiant
    Vec2f normal(gradiant[1], gradiant[0]);

    // Based on the normal and the lane count, add an offset to the node position
    Vec2f posNode = roadSystem->getNode(nodeId)->getPosition();
    double lanewidth = roadSystem->getLaneWidth();
    Vec2f ret(posNode[0] + gradiant[0] * lane * lanewidth, posNode[1] + gradiant[1] * lane * lanewidth);
    return ret;

}
